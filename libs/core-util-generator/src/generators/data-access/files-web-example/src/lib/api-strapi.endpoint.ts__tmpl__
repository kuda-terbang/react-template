import { createAxios, createExportedEndpoint } from '@<%= npmScope %>/util-api';
import type { Endpoint, StrapiObject } from '@<%= npmScope %>/util-api';
import { getCookie } from '@<%= npmScope %>/util-auth';

import { strapiBaseURL, strapiTokenKey } from '../config/envValue';
import { initialProductDetail, initialUser } from './model';
import type { Product, ProductDetailResponse, User } from './model';

const apiProductStrapi = createAxios({
  baseURL: `${strapiBaseURL}/api` ?? '',
  baseHeaders: {
    withBearer: true,
  },
  getToken: () => {
    return getCookie(strapiTokenKey);
  },
});

interface StrapiEndpoints {
  productsGet: Endpoint<
    void,
    {
      data: StrapiObject<Product>[];
			meta?: {
        pagination?: {
          page: number;
          pageCount: number;
          pageSize: number;
          total: number;
        };
      };
    },
		{ 'pagination[page]': number; 'pagination[pageSize]': number }
  >;
  productDetailGet: Endpoint<
    void,
    ProductDetailResponse,
    {
      id: string | number;
    }
  >;
  loginPost: Endpoint<
    { identifier: string; password: string },
    {
      jwt: string;
      user: User;
    }
  >;
  registerPost: Endpoint<
    { username: string; email: string; password: string },
    {
      jwt: string;
      user: User;
    }
  >;
  meGet: Endpoint<void, User>;
}

const endpoints: StrapiEndpoints = {
  loginPost: {
    method: 'post',
    path: '/auth/local',
    response: {
      jwt: '',
      user: { ...initialUser },
    },
  },
  registerPost: {
    method: 'post',
    path: '/auth/local/register',
    response: {
      jwt: '',
      user: { ...initialUser },
    },
  },
  productsGet: {
    method: 'get',
    isAuthenticated: true,
    path: '/products',
		paramsUrl: {
      'pagination[page]': 0,
      'pagination[pageSize]': 0,
    },
    response: {
      data: [],
    },
  },
  productDetailGet: {
    method: 'get',
    isAuthenticated: true,
    path: '/products/:id',
    paramsUrl: { id: 0 },
    response: {
      ...initialProductDetail,
    },
    mapData: (response: ProductDetailResponse) => {
      const id = response.data.id;
      const productName = response.data.attributes.product_name;
      response.data.attributes = {
        ...response.data.attributes,
        id_name: id + '-' + productName,
      };
    },
  },
  meGet: {
    method: 'get',
    path: '/users/me',
    response: {
      ...initialUser,
    },
  },
};

export default createExportedEndpoint(apiProductStrapi, endpoints);
